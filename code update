//Make sure these are added, check manage libraries if not
#include <DS3231.h>
#include <Wire.h>

//create clock instance
DS3231 clock;

//declare necessary variables
bool century = false;
bool h12Flag;
bool pmFlag;
int hour;
int minute;
String digits;
String hours;
int hbutt = 17;
int mbutt = 14;
int up = 16;
int down = 15;
int type = 19;
int tval;
int hval;
int mval;
int uval;
int dval;
bool hpress = false;
bool mpress = false;
bool twelve = false;



//select pins for each segment
int a = 1;
int b = 2;
int c = 3;
int d = 4;
int e = 5;
int f = 6;
int g = 7;
int dp = 8;
// select pin for anode
int d4 = 9;
int d3 = 10;
int d2 = 11;
int d1 = 12;
// set variable
long n = 1230;
int x = 100;
int del = 55;  // fine adjustment for clock
String minutes;
   
void setup()
{
  pinMode(d1, OUTPUT);
  pinMode(d2, OUTPUT);
  pinMode(d3, OUTPUT);
  pinMode(d4, OUTPUT);
  pinMode(a, OUTPUT);
  pinMode(b, OUTPUT);
  pinMode(c, OUTPUT);
  pinMode(d, OUTPUT);
  pinMode(e, OUTPUT);
  pinMode(f, OUTPUT);
  pinMode(g, OUTPUT);
  pinMode(dp, OUTPUT);
  pinMode(hbutt, INPUT);
  pinMode(mbutt, INPUT);
  pinMode(up, INPUT);
  pinMode(down, INPUT);
  Wire.begin();
      
  //IF TIME IS INCORRECT, Run the following under Wire.begin():
  //clock.setHour(x);
  //clock.setMinute(11);
  //clock.setSecond(7);
  //replace x with correct time
  //as long as battery is charged in clock module, you should only run this once, as time should stay even after disconnect
  
  //NOTE: The use of Serial may cause the numbers to appear strange
}
void loop(){
 //fun alarm feature
 //if((hour == 19 && minute == 45)){
 // takeonme();
 //}
 //basically, click either hour or minute set button to enter respective set mode, then use up and down
 //buttons until desired time is displayed. Press set mode again to lock it in
 
 //first part here is for setting the hour
 hpress = false;
 mpress = false;
 int currh = clock.getHour(h12Flag, pmFlag);
 int currm = clock.getMinute();
 hval = digitalRead(hbutt);
 mval = digitalRead(mbutt);
 if(mval ==1){
  mpress = true;
  delay(200);
 }
 if(hval == 1){
  hpress = true;
  delay(200);
 }
 while(hpress){
    if(currh < 10){
      Display(1, 0);
      Display(2, currh);
    }
    else if(currh < 20){
      int t = currh - 10;
      Display(1,1);
      Display(2, t);
    }
    else{
      int t = currh - 20;
      Display(1,2);
      Display(2, t);
    }
    hval = digitalRead(hbutt);
    mval = digitalRead(mbutt);
    uval = digitalRead(up);
    dval = digitalRead(down);
    if(uval == 1){
      delay(200);
      if(currh == 23){
        currh = 0;
      }
      else{
        currh = currh + 1;
      }
    }
    if(hval == 1){
      delay(200);
      clock.setHour(currh);
      hpress = false;
    }
    if(dval == 1){
      delay(200);
      if(currh == 0){
        currh = 23;
      }
      else{
        currh = currh - 1;
      }
    }
  }

 //this part is for setting the minutes
 while(mpress){
    String currs;
    if(currm < 10 && currm >=0){
      currs = '0' + String(currm);
    }
    else{
      currs = String(currm);
    }
    if(currs[0] == '0'){
      Display(3, 0);
    }
    if(currs[0] == '1'){
      Display(3, 1);
    }
    if(currs[0] == '2'){
     Display(3, 2);
    }
    if(currs[0] == '3'){
     Display(3, 3);
    }
    if(currs[0] == '4'){
     Display(3, 4);
    }
    if(currs[0] == '5'){
     Display(3, 5);
    }
    if(currs[0] == '6'){
     Display(3, 6);
    }
    if(currs[0] == '7'){
     Display(3, 7);
    }
    if(currs[0] == '8'){
     Display(3, 8);
    }
    if(currs[0] == '9'){
     Display(3, 9);
    }
    if(currs[1] == '0'){
     Display(4, 0);
    }
    if(currs[1] == '1'){
     Display(4, 1);
    }
    if(currs[1] == '2'){
     Display(4, 2);
    }
    if(currs[1] == '3'){
     Display(4, 3);
    }
    if(currs[1] == '4'){      
     Display(4, 4);
    }
    if(currs[1] == '5'){
     Display(4, 5);
    }
    if(currs[1] == '6'){
     Display(4, 6);
    }
    if(currs[1] == '7'){
     Display(4, 7);
    }
    if(currs[1] == '8'){
     Display(4, 8);
    }
    if(currs[1] == '9'){
     Display(4, 9);
    }
    
    mval = digitalRead(mbutt);
    uval = digitalRead(up);
    dval = digitalRead(down);
    if(uval == 1){
      delay(200);
      if(currm == 59){
        currm = 0;
      }
      else{
        currm = currm + 1;
      }
    }
    if(mval == 1){
      delay(200);
      clock.setMinute(currm);
      mpress = false;
    }
    if(dval == 1){
      delay(200);
      if(currm == 0){
        currm = 59;
      }
      else{
        currm = currm - 1;
      }
    }
  }

 //get time from clock
 hour = clock.getHour(h12Flag, pmFlag);
 minute = clock.getMinute(); 
 tval = digitalRead(type);
 if(tval == HIGH){
  delay(200);
  if(twelve){
    twelve = false;
  }
  else{
    twelve = true;
  }
 }

 if(twelve){
  hour = hour - 12;
 }

 //if minutes or hours single digit, add a 0 in the display to keep it 4 digits 
 if(minute >=0 && minute <10){
  minutes = String(0) + String(minute);
 }
 else{
  minutes = String(minute);
 }
 
 if(hour >=0 && hour <10){
  hours = String(0) + String(hour);
 }
 else{
  hours = String(hour);
 }
 digits = hours + minutes;
  
 //convert string digits to individual digits= integers to display
 if(digits[0] == '0'){
  Display(1, 0);
 }
 if(digits[0] == '1'){
  Display(1, 1);
 }
 if(digits[0] == '2'){
  Display(1, 2);
 }
 if(digits[1] == '0'){
  Display(2, 0);
 }
 if(digits[1] == '1'){
  Display(2, 1);
 }
 if(digits[1] == '2'){
  Display(2, 2);
 }
 if(digits[1] == '3'){
  Display(2, 3);
 }
 if(digits[1] == '4'){
  Display(2, 4);
 }
 if(digits[1] == '5'){
  Display(2, 5);
 }
 if(digits[1] == '6'){
  Display(2, 6);
 }
 if(digits[1] == '7'){
  Display(2, 7);
 }
 if(digits[1] == '8'){
  Display(2, 8);
 }
 if(digits[1] == '9'){
  Display(2, 9);
 }
 if(digits[2] == '0'){
  Display(3, 0);
 }
 if(digits[2] == '1'){
  Display(3, 1);
 }
 if(digits[2] == '2'){
  Display(3, 2);
 }
 if(digits[2] == '3'){
  Display(3, 3);
 }
 if(digits[2] == '4'){
  Display(3, 4);
 }
 if(digits[2] == '5'){
  Display(3, 5);
 }
 if(digits[2] == '6'){
  Display(3, 6);
 }
 if(digits[2] == '7'){
  Display(3, 7);
 }
 if(digits[2] == '8'){
  Display(3, 8);
 }
 if(digits[2] == '9'){
  Display(3, 9);
 }
 if(digits[3] == '0'){
  Display(4, 0);
 }
 if(digits[3] == '1'){
  Display(4, 1);
 }
 if(digits[3] == '2'){
  Display(4, 2);
 }
 if(digits[3] == '3'){
  Display(4, 3);
 }
 if(digits[3] == '4'){
  Display(4, 4);
 }
 if(digits[3] == '5'){
  Display(4, 5);
 }
 if(digits[3] == '6'){
  Display(4, 6);
 }
 if(digits[3] == '7'){
  Display(4, 7);
 }
 if(digits[3] == '8'){
  Display(4, 8);
 }
 if(digits[3] == '9'){
  Display(4, 9);
 }
}
void Writer(unsigned char n)//Writes to anodes for each of the four numbers
{
 switch(n)
 {
  case 1: 
    digitalWrite(d1,LOW);
    digitalWrite(d2, HIGH);
    digitalWrite(d3, HIGH);
    digitalWrite(d4, HIGH);   
      break;
   case 2: 
    digitalWrite(d1, HIGH);
    digitalWrite(d2, LOW);
    digitalWrite(d3, HIGH);
    digitalWrite(d4, HIGH); 
      break;
   case 3: 
    digitalWrite(d1,HIGH);
    digitalWrite(d2, HIGH);
    digitalWrite(d3, LOW);     
    digitalWrite(d4, HIGH); 
      break;
   case 4: 
    digitalWrite(d1, HIGH);
    digitalWrite(d2, HIGH);
    digitalWrite(d3, HIGH); 
    digitalWrite(d4, LOW); 
     break;
      default :
       digitalWrite(d1, HIGH);
    digitalWrite(d2, HIGH);
    digitalWrite(d3, HIGH);

    digitalWrite(d4, HIGH);
      break;
  }
}
//Functions to write number on 7 segment display
void Num_0()
{
  digitalWrite(a, HIGH);
  digitalWrite(b, HIGH);
  digitalWrite(c, HIGH);
  digitalWrite(d, HIGH);
  digitalWrite(e, HIGH);
  digitalWrite(f, HIGH);
  digitalWrite(g, LOW);
  digitalWrite(dp,LOW);
}
void Num_1()
{
  digitalWrite(a, LOW);
  digitalWrite(b, HIGH);
  digitalWrite(c, HIGH);
  digitalWrite(d, LOW);
  digitalWrite(e, LOW);
  digitalWrite(f, LOW);
  digitalWrite(g, LOW);
  digitalWrite(dp,LOW);
}
void Num_2()
{
  digitalWrite(a, HIGH);
  digitalWrite(b, HIGH);
  digitalWrite(c, LOW);
  digitalWrite(d, HIGH);
  digitalWrite(e, HIGH);
  digitalWrite(f, LOW);
  digitalWrite(g, HIGH);
  digitalWrite(dp,LOW);
}
void Num_3()
{
  digitalWrite(a, HIGH);

  digitalWrite(b, HIGH);
  digitalWrite(c, HIGH);
  digitalWrite(d, HIGH);
  digitalWrite(e, LOW);
  digitalWrite(f, LOW);
  digitalWrite(g, HIGH);
  digitalWrite(dp,LOW);
}
void Num_4()
{
  digitalWrite(a, LOW);
  digitalWrite(b, HIGH);
  digitalWrite(c, HIGH);
  digitalWrite(d, LOW);
  digitalWrite(e, LOW);
  digitalWrite(f, HIGH);
  digitalWrite(g, HIGH);
  digitalWrite(dp,LOW);
}
void Num_5()
{
  digitalWrite(a, HIGH);
  digitalWrite(b, LOW);
  digitalWrite(c, HIGH);
  digitalWrite(d, HIGH);
  digitalWrite(e, LOW);
  digitalWrite(f, HIGH);
  digitalWrite(g, HIGH);
  digitalWrite(dp,LOW);
}
void Num_6()
{
  digitalWrite(a, HIGH);
  digitalWrite(b, LOW);
  digitalWrite(c, HIGH);
  digitalWrite(d, HIGH);
  digitalWrite(e, HIGH);
  digitalWrite(f, HIGH);
  digitalWrite(g, HIGH);
  digitalWrite(dp,LOW);

}
void Num_7()
{
  digitalWrite(a, HIGH);
  digitalWrite(b, HIGH);
  digitalWrite(c, HIGH);
  digitalWrite(d, LOW);
  digitalWrite(e, LOW);
  digitalWrite(f, LOW);
  digitalWrite(g, LOW);
  digitalWrite(dp,LOW);
}
void Num_8()
{
  digitalWrite(a, HIGH);
  digitalWrite(b, HIGH);
  digitalWrite(c, HIGH);
  digitalWrite(d, HIGH);
  digitalWrite(e, HIGH);
  digitalWrite(f, HIGH);
  digitalWrite(g, HIGH);
  digitalWrite(dp,LOW);
}
void Num_9()
{
  digitalWrite(a, HIGH);
  digitalWrite(b, HIGH);
  digitalWrite(c, HIGH);
  digitalWrite(d, HIGH);
  digitalWrite(e, LOW);
  digitalWrite(f, HIGH);
  digitalWrite(g, HIGH);
  digitalWrite(dp,LOW);
}
void Clear()  // clear the screen
{
  digitalWrite(a, LOW);
  digitalWrite(b, LOW);
  digitalWrite(c, LOW);
  digitalWrite(d, LOW);

  digitalWrite(e, LOW);
  digitalWrite(f, LOW);
  digitalWrite(g, LOW);
  digitalWrite(dp,LOW);
}
void pickNumber(unsigned char n) //connects input time to display configuration
{
  switch(n)
  {
   case 0:Num_0();
   break;
   case 1:Num_1();
   break;
   case 2:Num_2();
   break;
   case 3:Num_3();
   break;
   case 4:Num_4();
   break;
   case 5:Num_5();
   break;
   case 6:Num_6();
   break;
   case 7:Num_7();
   break;
   case 8:Num_8();
   break;
   case 9:Num_9();
   break;
   default:Clear();
   break; 
  }
}
void Display(unsigned char x, unsigned char Number) //Display time on board
{
 Writer(x);
 pickNumber(Number);
 delay(1);
 Clear() ; // clear the screen
}

void takeonme(){
#define NOTE_B0  31
#define NOTE_C1  33
#define NOTE_CS1 35
#define NOTE_D1  37
#define NOTE_DS1 39
#define NOTE_E1  41
#define NOTE_F1  44
#define NOTE_FS1 46
#define NOTE_G1  49
#define NOTE_GS1 52
#define NOTE_A1  55
#define NOTE_AS1 58
#define NOTE_B1  62
#define NOTE_C2  65
#define NOTE_CS2 69
#define NOTE_D2  73
#define NOTE_DS2 78
#define NOTE_E2  82
#define NOTE_F2  87
#define NOTE_FS2 93
#define NOTE_G2  98
#define NOTE_GS2 104
#define NOTE_A2  110
#define NOTE_AS2 117
#define NOTE_B2  123
#define NOTE_C3  131
#define NOTE_CS3 139
#define NOTE_D3  147
#define NOTE_DS3 156
#define NOTE_E3  165
#define NOTE_F3  175
#define NOTE_FS3 185
#define NOTE_G3  196
#define NOTE_GS3 208
#define NOTE_A3  220
#define NOTE_AS3 233
#define NOTE_B3  247
#define NOTE_C4  262
#define NOTE_CS4 277
#define NOTE_D4  294
#define NOTE_DS4 311
#define NOTE_E4  330
#define NOTE_F4  349
#define NOTE_FS4 370
#define NOTE_G4  392
#define NOTE_GS4 415
#define NOTE_A4  440
#define NOTE_AS4 466
#define NOTE_B4  494
#define NOTE_C5  523
#define NOTE_CS5 554
#define NOTE_D5  587
#define NOTE_DS5 622
#define NOTE_E5  659
#define NOTE_F5  698
#define NOTE_FS5 740
#define NOTE_G5  784
#define NOTE_GS5 831
#define NOTE_A5  880
#define NOTE_AS5 932
#define NOTE_B5  988
#define NOTE_C6  1047
#define NOTE_CS6 1109
#define NOTE_D6  1175
#define NOTE_DS6 1245
#define NOTE_E6  1319
#define NOTE_F6  1397
#define NOTE_FS6 1480
#define NOTE_G6  1568
#define NOTE_GS6 1661
#define NOTE_A6  1760
#define NOTE_AS6 1865
#define NOTE_B6  1976
#define NOTE_C7  2093
#define NOTE_CS7 2217
#define NOTE_D7  2349
#define NOTE_DS7 2489
#define NOTE_E7  2637
#define NOTE_F7  2794
#define NOTE_FS7 2960
#define NOTE_G7  3136
#define NOTE_GS7 3322
#define NOTE_A7  3520
#define NOTE_AS7 3729
#define NOTE_B7  3951
#define NOTE_C8  4186
#define NOTE_CS8 4435
#define NOTE_D8  4699
#define NOTE_DS8 4978
#define REST      0


// change this to make the song slower or faster
int tempo = 140;

// change this to whichever pin you want to use
int buzzer = 22;

// notes of the moledy followed by the duration.
// a 4 means a quarter note, 8 an eighteenth , 16 sixteenth, so on
// !!negative numbers are used to represent dotted notes,
// so -4 means a dotted quarter note, that is, a quarter plus an eighteenth!!
int melody[] = {

  // Take on me, by A-ha
  // Score available at https://musescore.com/user/27103612/scores/4834399
  // Arranged by Edward Truong

  NOTE_FS5,8, NOTE_FS5,8,NOTE_D5,8, NOTE_B4,8, REST,8, NOTE_B4,8, REST,8, NOTE_E5,8, 
  REST,8, NOTE_E5,8, REST,8, NOTE_E5,8, NOTE_GS5,8, NOTE_GS5,8, NOTE_A5,8, NOTE_B5,8,
  NOTE_A5,8, NOTE_A5,8, NOTE_A5,8, NOTE_E5,8, REST,8, NOTE_D5,8, REST,8, NOTE_FS5,8, 
  REST,8, NOTE_FS5,8, REST,8, NOTE_FS5,8, NOTE_E5,8, NOTE_E5,8, NOTE_FS5,8, NOTE_E5,8,
  NOTE_FS5,8, NOTE_FS5,8,NOTE_D5,8, NOTE_B4,8, REST,8, NOTE_B4,8, REST,8, NOTE_E5,8, 
  
  REST,8, NOTE_E5,8, REST,8, NOTE_E5,8, NOTE_GS5,8, NOTE_GS5,8, NOTE_A5,8, NOTE_B5,8,
  NOTE_A5,8, NOTE_A5,8, NOTE_A5,8, NOTE_E5,8, REST,8, NOTE_D5,8, REST,8, NOTE_FS5,8, 
  REST,8, NOTE_FS5,8, REST,8, NOTE_FS5,8, NOTE_E5,8, NOTE_E5,8, NOTE_FS5,8, NOTE_E5,8,
  NOTE_FS5,8, NOTE_FS5,8,NOTE_D5,8, NOTE_B4,8, REST,8, NOTE_B4,8, REST,8, NOTE_E5,8, 
  REST,8, NOTE_E5,8, REST,8, NOTE_E5,8, NOTE_GS5,8, NOTE_GS5,8, NOTE_A5,8, NOTE_B5,8,
  
  NOTE_A5,8, NOTE_A5,8, NOTE_A5,8, NOTE_E5,8, REST,8, NOTE_D5,8, REST,8, NOTE_FS5,8, 
  REST,8, NOTE_FS5,8, REST,8, NOTE_FS5,8, NOTE_E5,8, NOTE_E5,8, NOTE_FS5,8, NOTE_E5,8,
  
};

// sizeof gives the number of bytes, each int value is composed of two bytes (16 bits)
// there are two values per note (pitch and duration), so for each note there are four bytes
int notes = sizeof(melody) / sizeof(melody[0]) / 2;

// this calculates the duration of a whole note in ms
int wholenote = (60000 * 4) / tempo;

int divider = 0, noteDuration = 0;

  // iterate over the notes of the melody.
  // Remember, the array is twice the number of notes (notes + durations)
  for (int thisNote = 0; thisNote < notes * 2; thisNote = thisNote + 2) {

    // calculates the duration of each note
    divider = melody[thisNote + 1];
    if (divider > 0) {
      // regular note, just proceed
      noteDuration = (wholenote) / divider;
    } else if (divider < 0) {
      // dotted notes are represented with negative durations!!
      noteDuration = (wholenote) / abs(divider);
      noteDuration *= 1.5; // increases the duration in half for dotted notes
    }

    // we only play the note for 90% of the duration, leaving 10% as a pause
    tone(buzzer, melody[thisNote], noteDuration * 0.9);

    // Wait for the specief duration before playing the next note.
    delay(noteDuration);

    // stop the waveform generation before the next note.
    noTone(buzzer);
}
}
