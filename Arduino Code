//Make sure these are added, check manage libraries if not
#include <DS3231.h>
#include <Wire.h>

//create clock instance
DS3231 clock;

//declare necessary variables
bool century = false;
bool h12Flag;
bool pmFlag;
int hour;
int minute;
String digits;
String hours;


//select pins for each segment
int a = 1;
int b = 2;
int c = 3;
int d = 4;
int e = 5;
int f = 6;
int g = 7;
int dp = 8;
// select pin for anode
int d4 = 9;
int d3 = 10;
int d2 = 11;
int d1 = 12;
// set variable
long n = 1230;
int x = 100;
int del = 55;  // fine adjustment for clock
String minutes;
   
void setup()
{
  pinMode(d1, OUTPUT);
  pinMode(d2, OUTPUT);
  pinMode(d3, OUTPUT);
  pinMode(d4, OUTPUT);
  pinMode(a, OUTPUT);
  pinMode(b, OUTPUT);
  pinMode(c, OUTPUT);
  pinMode(d, OUTPUT);
  pinMode(e, OUTPUT);
  pinMode(f, OUTPUT);
  pinMode(g, OUTPUT);
  pinMode(dp, OUTPUT);
  Wire.begin();
    
  //IF TIME IS INCORRECT, Run the following under Wire.begin():
  //clock.setHour(x);
  //clock.setMinute(11);
  //clock.setSecond(7);
  //replace x with correct time
  //as long as battery is charged in clock module, you should only run this once, as time should stay even after disconnect
  
  //NOTE: The use of Serial may cause the numbers to appear strange
}
void loop()
{
 //get time from clock
 hour = clock.getHour(h12Flag, pmFlag);
 minute = clock.getMinute();     

 //if minutes or hours single digit, add a 0 in the display to keep it 4 digits 
 if(minute >=0 && minute <10){
  minutes = String(0) + String(minute);
 }
 else{
  minutes = String(minute);
 }
 
 if(hour >=0 && hour <10){
  hours = String(0) + String(hour);
 }
 else{
  hours = String(hour);
 }
 digits = hours + minutes;
  
 //convert string digits to individual digits= integers to display
 if(digits[0] == '0'){
  Display(1, 0);
 }
 if(digits[0] == '1'){
  Display(1, 1);
 }
 if(digits[0] == '2'){
  Display(1, 2);
 }
 if(digits[1] == '0'){
  Display(2, 0);
 }
 if(digits[1] == '1'){
  Display(2, 1);
 }
 if(digits[1] == '2'){
  Display(2, 2);
 }
 if(digits[1] == '3'){
  Display(2, 3);
 }
 if(digits[1] == '4'){
  Display(2, 4);
 }
 if(digits[1] == '5'){
  Display(2, 5);
 }
 if(digits[1] == '6'){
  Display(2, 6);
 }
 if(digits[1] == '7'){
  Display(2, 7);
 }
 if(digits[1] == '8'){
  Display(2, 8);
 }
 if(digits[1] == '9'){
  Display(2, 9);
 }
 if(digits[2] == '0'){
  Display(3, 0);
 }
 if(digits[2] == '1'){
  Display(3, 1);
 }
 if(digits[2] == '2'){
  Display(3, 2);
 }
 if(digits[2] == '3'){
  Display(3, 3);
 }
 if(digits[2] == '4'){
  Display(3, 4);
 }
 if(digits[2] == '5'){
  Display(3, 5);
 }
 if(digits[2] == '6'){
  Display(3, 6);
 }
 if(digits[2] == '7'){
  Display(3, 7);
 }
 if(digits[2] == '8'){
  Display(3, 8);
 }
 if(digits[2] == '9'){
  Display(3, 9);
 }
 if(digits[3] == '0'){
  Display(4, 0);
 }
 if(digits[3] == '1'){
  Display(4, 1);
 }
 if(digits[3] == '2'){
  Display(4, 2);
 }
 if(digits[3] == '3'){
  Display(4, 3);
 }
 if(digits[3] == '4'){
  Display(4, 4);
 }
 if(digits[3] == '5'){
  Display(4, 5);
 }
 if(digits[3] == '6'){
  Display(4, 6);
 }
 if(digits[3] == '7'){
  Display(4, 7);
 }
 if(digits[3] == '8'){
  Display(4, 8);
 }
 if(digits[3] == '9'){
  Display(4, 9);
 }
}
void Writer(unsigned char n)//Writes to anodes for each of the four numbers
{
 switch(n)
 {
  case 1: 
    digitalWrite(d1,LOW);
    digitalWrite(d2, HIGH);
    digitalWrite(d3, HIGH);
    digitalWrite(d4, HIGH);   
      break;
   case 2: 
    digitalWrite(d1, HIGH);
    digitalWrite(d2, LOW);
    digitalWrite(d3, HIGH);
    digitalWrite(d4, HIGH); 
      break;
   case 3: 
    digitalWrite(d1,HIGH);
    digitalWrite(d2, HIGH);
    digitalWrite(d3, LOW);     
    digitalWrite(d4, HIGH); 
      break;
   case 4: 
    digitalWrite(d1, HIGH);
    digitalWrite(d2, HIGH);
    digitalWrite(d3, HIGH); 
    digitalWrite(d4, LOW); 
     break;
      default :
       digitalWrite(d1, HIGH);
    digitalWrite(d2, HIGH);
    digitalWrite(d3, HIGH);

    digitalWrite(d4, HIGH);
      break;
  }
}
//Functions to write number on 7 segment display
void Num_0()
{
  digitalWrite(a, HIGH);
  digitalWrite(b, HIGH);
  digitalWrite(c, HIGH);
  digitalWrite(d, HIGH);
  digitalWrite(e, HIGH);
  digitalWrite(f, HIGH);
  digitalWrite(g, LOW);
  digitalWrite(dp,LOW);
}
void Num_1()
{
  digitalWrite(a, LOW);
  digitalWrite(b, HIGH);
  digitalWrite(c, HIGH);
  digitalWrite(d, LOW);
  digitalWrite(e, LOW);
  digitalWrite(f, LOW);
  digitalWrite(g, LOW);
  digitalWrite(dp,LOW);
}
void Num_2()
{
  digitalWrite(a, HIGH);
  digitalWrite(b, HIGH);
  digitalWrite(c, LOW);
  digitalWrite(d, HIGH);
  digitalWrite(e, HIGH);
  digitalWrite(f, LOW);
  digitalWrite(g, HIGH);
  digitalWrite(dp,LOW);
}
void Num_3()
{
  digitalWrite(a, HIGH);

  digitalWrite(b, HIGH);
  digitalWrite(c, HIGH);
  digitalWrite(d, HIGH);
  digitalWrite(e, LOW);
  digitalWrite(f, LOW);
  digitalWrite(g, HIGH);
  digitalWrite(dp,LOW);
}
void Num_4()
{
  digitalWrite(a, LOW);
  digitalWrite(b, HIGH);
  digitalWrite(c, HIGH);
  digitalWrite(d, LOW);
  digitalWrite(e, LOW);
  digitalWrite(f, HIGH);
  digitalWrite(g, HIGH);
  digitalWrite(dp,LOW);
}
void Num_5()
{
  digitalWrite(a, HIGH);
  digitalWrite(b, LOW);
  digitalWrite(c, HIGH);
  digitalWrite(d, HIGH);
  digitalWrite(e, LOW);
  digitalWrite(f, HIGH);
  digitalWrite(g, HIGH);
  digitalWrite(dp,LOW);
}
void Num_6()
{
  digitalWrite(a, HIGH);
  digitalWrite(b, LOW);
  digitalWrite(c, HIGH);
  digitalWrite(d, HIGH);
  digitalWrite(e, HIGH);
  digitalWrite(f, HIGH);
  digitalWrite(g, HIGH);
  digitalWrite(dp,LOW);

}
void Num_7()
{
  digitalWrite(a, HIGH);
  digitalWrite(b, HIGH);
  digitalWrite(c, HIGH);
  digitalWrite(d, LOW);
  digitalWrite(e, LOW);
  digitalWrite(f, LOW);
  digitalWrite(g, LOW);
  digitalWrite(dp,LOW);
}
void Num_8()
{
  digitalWrite(a, HIGH);
  digitalWrite(b, HIGH);
  digitalWrite(c, HIGH);
  digitalWrite(d, HIGH);
  digitalWrite(e, HIGH);
  digitalWrite(f, HIGH);
  digitalWrite(g, HIGH);
  digitalWrite(dp,LOW);
}
void Num_9()
{
  digitalWrite(a, HIGH);
  digitalWrite(b, HIGH);
  digitalWrite(c, HIGH);
  digitalWrite(d, HIGH);
  digitalWrite(e, LOW);
  digitalWrite(f, HIGH);
  digitalWrite(g, HIGH);
  digitalWrite(dp,LOW);
}
void Clear()  // clear the screen
{
  digitalWrite(a, LOW);
  digitalWrite(b, LOW);
  digitalWrite(c, LOW);
  digitalWrite(d, LOW);

  digitalWrite(e, LOW);
  digitalWrite(f, LOW);
  digitalWrite(g, LOW);
  digitalWrite(dp,LOW);
}
void pickNumber(unsigned char n) //connects input time to display configuration
{
  switch(n)
  {
   case 0:Num_0();
   break;
   case 1:Num_1();
   break;
   case 2:Num_2();
   break;
   case 3:Num_3();
   break;
   case 4:Num_4();
   break;
   case 5:Num_5();
   break;
   case 6:Num_6();
   break;
   case 7:Num_7();
   break;
   case 8:Num_8();
   break;
   case 9:Num_9();
   break;
   default:Clear();
   break; 
  }
}
void Display(unsigned char x, unsigned char Number) //Display time on board
{
 Writer(x);
 pickNumber(Number);
 delay(1);
 Clear() ; // clear the screen
}
